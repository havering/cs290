/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
	var useless = null;
	return useless;
}

//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
var bar = function(doubleArray) {
	var success = true;
    

	for (var i = 0.0; i < doubleArray.length; i++) {
    	 
    	if (typeof doubleArray[i] != 'number') {
        	success = false;
        	return success;
    	}
    	else {
    		doubleArray[i] = doubleArray[i] * 2;
    	}
   	 
	}
	return success;
};

//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(logArray) {
	var tempArray = [];

	for (var i = 0; i < logArray.length; i++) {
		// split syntax - the value to trigger the split, the number of
		// times to allow it to split before stopping
		// creates an array of the values if split multiple times before stopping
		// hashLine is split after the first space and then stops
		var hashLine = logArray[i].split(" ", 1);
		// 7 spaces between start of string and commit message
		var splitDate = logArray[i].split(" ", 7);
		// splitDate is now an array with 6 values
		// [hash, day, date, month, year, time]
		var dateLine;
		// skips hash, concatenates remainder of values into dateLine
		for (var j = 1; j < splitDate.length; j++) {
			dateLine = splitDate[j] + " ";
		}
		// splits after ", capturing commit message
		var splitMessage = logArray[i].split("\"");
		// splitMessage is now an array with two values
		// the first parts to be discarded, and the remainining commit message
		var messageLine = splitMessage[1];
		// use function to create GitLog class with above data in position i of logArray
		var newGit = new GitLog(hashLine, dateLine, messageLine);

		tempArray.push(newGit);
	}
	return tempArray;
}
//end your code
